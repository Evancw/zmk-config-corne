#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define NAV 1
#define SYM 2
#define ADJ 3
#define EXTRA 4

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        paraless: paraless {
            compatible = "zmk,behavior-mod-morph";
            label = "PARALESS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        paragreat: paragreat {
            compatible = "zmk,behavior-mod-morph";
            label = "PARAGREAT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        up_pgup: up_pgup {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_PGUP";
            bindings = <&kp UP>, <&kp PAGE_UP>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        down_pgdn: down_pgdn {
            compatible = "zmk,behavior-mod-morph";
            label = "DOWN_PGDN";
            bindings = <&kp DOWN>, <&kp PAGE_DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        left_home: left_home {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_HOME";
            bindings = <&kp LEFT>, <&kp HOME>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        right_end: right_end {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_END";
            bindings = <&kp RIGHT>, <&kp END>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <13 29>;
        };

        perc {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <28 16>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <4 16>;
        };

        pound {
            bindings = <&kp POUND>;
            key-positions = <3 15>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <2 14>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <26 14>;
        };

        copy {
            bindings = <&kp K_COPY>;
            key-positions = <28 27>;
        };

        paste {
            bindings = <&kp K_PASTE>;
            key-positions = <26 27>;
        };

        star {
            bindings = <&kp STAR>;
            key-positions = <8 20>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <32 20>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <7 19>;
        };

        minus {
            bindings = <&kp KP_MINUS>;
            key-positions = <31 19>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <30 18>;
        };

        leftbrack {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 32>;
        };

        rightbrack {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <33 32>;
        };

        para-less {
            bindings = <&paraless>;
            key-positions = <20 19>;
        };

        para-great {
            bindings = <&paragreat>;
            key-positions = <20 21>;
        };

        exclaim {
            bindings = <&kp EXCL>;
            key-positions = <1 13>;
        };

        carot {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
        };

        ampersand {
            bindings = <&kp AMPS>;
            key-positions = <7 19>;
        };
    };

    //

    keymap {
        compatible = "zmk,keymap";

        DEF {
            display-name = "Base";

            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&kp TAB        &kp Q  &kp W  &kp F     &kp P  &kp G        &kp J       &kp L  &kp U         &kp Y    &kp SEMICOLON  &kp ESC
&kp BACKSPACE  &kp A  &kp R  &kp S     &kp T  &kp D        &kp H       &kp N  &kp E         &kp I    &kp O          &kp SQT
&kp LCTRL      &kp Z  &kp X  &kp C     &kp V  &kp B        &kp K       &kp M  &kp COMMA     &kp DOT  &kp FSLH       &kp RET
                             &kp LGUI  &mo 2  &kp SPACE    &kp LSHIFT  &mo 1  &kp LEFT_ALT
            >;
        };

        NAV {
            display-name = "NavNum";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&kp GRAVE   &kp N1            &kp N2           &kp N3      &kp N4       &kp N5    &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp BACKSPACE
&kp DELETE  &none             &kp LC(LS(TAB))  &up_pgup    &kp LC(TAB)  &none     &kp N0  &kp N4  &kp N5  &kp N6  &none   &none
&trans      &kp LS(LEFT_GUI)  &left_home       &down_pgdn  &right_end   &none     &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
                                               &trans      &trans       &trans    &trans  &trans  &trans
            >;
        };

        SYM {
            display-name = "Symbols";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TILDE   &kp EXCL  &kp AT           &kp HASH    &kp DLLR     &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LEFT_PARENTHESIS  &kp RPAR  &trans
&kp DELETE  &trans    &kp LC(LS(TAB))  &up_pgup    &kp LC(TAB)  &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT              &kp BSLH  &trans
&trans      &trans    &left_home       &down_pgdn  &right_end   &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC              &kp PIPE  &trans
                                       &trans      &trans       &trans       &trans     &trans     &trans
            >;
        };

        ADJ {
            display-name = "System";
            bindings = <
&trans        &kp F1        &kp F2        &kp F3        &kp F4      &kp F5            &kp F6  &kp F7  &kp F8  &kp F9  &kp F10      &kp LC(LA(DELETE))
&trans        &kp F11       &kp F12       &trans        &trans      &studio_unlock    &trans  &trans  &trans  &trans  &trans       &trans
&out OUT_TOG  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR  &bt BT_CLR_ALL    &trans  &trans  &trans  &trans  &bootloader  &trans
                                          &trans        &trans      &trans            &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        l3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
